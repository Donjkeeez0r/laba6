'''
1й символ - латинская буква, 2ой латинская буква или цифра
'''

import string
import timeit
import itertools

# 1 часть

# Алгоритмический метод формирования
def generate_password_algorithm(num_passwords):
    passwords = []
    alphabet = string.ascii_letters + string.digits
    for i in range(num_passwords):
        first_char = string.ascii_letters[i % len(string.ascii_letters)]    # Первый символ латинская буква
        second_char = alphabet[(i + 1) % len(alphabet)]                     # Второй символ либо цифра, либо буква
        password = first_char + second_char
        passwords.append(password)
    return passwords

# Метод формирования с помощью функций питона (с помощью itertools)
def generate_passwords_pythonic():
    passwords = []
    alphabet = string.ascii_letters + string.digits
    combinations = itertools.product(string.ascii_letters, alphabet)
    for combination in combinations:
        password = ''.join(combination)
        passwords.append(password)
    return passwords

generated_passwords = generate_passwords_pythonic()

print("1 часть: Генерация паролей до усложнения:","\nВсе возможные комбинации:",generated_passwords, "\nКоличество комбинаций до усложнения:",len(generated_passwords))  # - вывод всех комбинаций паролей (3224) до усложнения

time_taken_generate_password_algorithm = timeit.timeit(lambda: generate_password_algorithm(10000), number=1)
print("Время выполнения алгоритмической функции:", time_taken_generate_password_algorithm)

time_taken_generate_passwords_pythonic = timeit.timeit(generate_passwords_pythonic, number=1)
print("Время выполнения с помощью функций Питона:", time_taken_generate_passwords_pythonic)

def optimal_approach():
    if time_taken_generate_password_algorithm < time_taken_generate_passwords_pythonic:
        print ("Алгоритмический подход быстрее")
    elif time_taken_generate_password_algorithm > time_taken_generate_passwords_pythonic:
        print("Подход с использованием функций Питона быстрее")
    else:
        print("Оба подхода выполняются с одинаковой скоростью")
optimal_approach()

# 2 часть. Ограничение - первый символ латинская буква, а второй символ только четная цифра.

def generate_password_with_constraint():
    passwords = []
    alphabet = string.ascii_letters
    even_digits = '02468'
    combinations = itertools.product(alphabet, even_digits)
    for combo in combinations:
        password = ''.join(combo)
        passwords.append(password)
    return passwords

generated_passwords_2 = generate_password_with_constraint()

print("\n2 часть: Генерация паролей с учетом ограничения", "\nВсе возможные комбинации:",generated_passwords_2, "\nКоличество комбинаций после усложнения:",len(generated_passwords_2))

time_taken_generate_password_with_constraint = timeit.timeit(lambda: generate_password_with_constraint, number=1)
print("Время выполнения с учетом ограничения:", time_taken_generate_password_with_constraint)







