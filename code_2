'''
1й символ - латинская буква, 2ой латинская буква или цифра
'''
import string
import timeit

def generate_password_algorithm(num_passwords):
    passwords = []
    for _ in range(num_passwords):
        password = ''
        password += string.ascii_letters[_ % 52]                  # Первый символ - латинская буква
        password += string.ascii_letters[(_ + 1) % 52]            # Второй символ - либо латинская буква, либо цифра
        passwords.append(password)
    return passwords


def generate_password_pythonic(num_passwords):
    passwords = [
        ''.join([string.ascii_letters[i % 52], string.digits[(i + 1) % 5 * 2]])
        for i in range(num_passwords)
    ]
    return passwords


def measure_time(func, num_passwords):
    start_time = timeit.default_timer()
    func(num_passwords)
    return timeit.default_timer() - start_time

# Указываем количество паролей (первые которые вывести)
num_passwords = 10

print("1 часть: Генерация паролей до усложнения (первые 10 паролей):")
generated_passwords_1 = generate_password_algorithm(num_passwords)
for i, password in enumerate(generated_passwords_1[:10]):
    print(f"Пароль {i+1}: {password}")


time_algorithm = measure_time(generate_password_algorithm, num_passwords)
time_pythonic = measure_time(generate_password_pythonic, num_passwords)


print("\nВремя выполнения с использованием алгоритмического подхода:", time_algorithm)
print("Время выполнения с использованием генератора списков:", time_pythonic)


def optimal_approach():
    if time_algorithm < time_pythonic:
        print("Алгоритмический подход быстрее")
    elif time_algorithm > time_pythonic:
        print("Подход с использованием генератора списков быстрее")
    else:
        print("Оба подхода выполняются с одинаковой скоростью")


optimal_approach()

def count_all_possible_passwords():
    num_letters = len(string.ascii_letters)
    total_combinations = num_letters ** 2 * 5
    return total_combinations


print("Количество всех возможных комбинаций пароля:", count_all_possible_passwords())


print("\n2 часть: Генерация паролей с учетом ограничения")


def generate_password_with_constraint(num_passwords):
    passwords = []
    for _ in range(num_passwords):
        password = ''
        password += string.ascii_letters[_ % 52]                   # Первый символ - латинская буква
        password += string.digits[(_ + 1) % 5 * 2]                # Второй символ - только четная цифра
        passwords.append(password)
    return passwords


time_with_constraint = measure_time(generate_password_with_constraint, num_passwords)
print("Время выполнения с учетом ограничения:", time_with_constraint)


generated_passwords_2 = generate_password_with_constraint(num_passwords)
print("Первые 10 паролей с учетом ограничения:")
for i, password in enumerate(generated_passwords_2[:10]):
    print(f"Пароль {i+1}: {password}")


def count_all_possible_passwords_with_constraint():
    total_combinations = 26 * 5
    return total_combinations


print("\nКоличество всех возможных комбинаций пароля с учетом ограничения:", count_all_possible_passwords_with_constraint())
